parameters:
  - name: timestamper
    type: string
    displayName: Time Stamper URL
    default: 'http://timestamp.digicert.com'
    values:
    - 'http://timestamp.sectigo.com'
    - 'http://timestamp.digicert.com'
    - 'http://aatl-timestamp.globalsign.com/tsa/aohfewat2389535fnasgnlg5m23'
    - 'http://timestamp.entrust.net/TSS/RFC3161sha2TS'
    - 'http://kstamp.keynectis.com/KSign/'
    - 'http://tsa.quovadisglobal.com/TSS/HttpTspServer'
    - 'http://kstamp.keynectis.com/KSign/'
    - 'http://tss.accv.es:8318/tsa'
    - 'http://tsa.izenpe.com'
    - 'http://timestamp.sectigo.com/qualified'
    - 'http://timestamp.comodoca.com'
  - name: packagesigninginterval
    type: number
    displayName: Package Signing Interval
    default: 1
  - name: git_commit_ids
    type: string
    displayName: Build Commit IDs
    default: ''
  - name: project_to_build
    type: string
    displayName: Project To Build
    default: ' '
    values:
      - ' '
      - 'C3D.Extensions.Playwright.AspNetCore'

trigger:
  batch: true
  branches:
    include:
    - main
  paths:
    exclude:
    - docs/*
    - README.md

pr: none

pool:
  vmImage: windows-latest

variables:
- group: Github-Packages
- group: 'c3d-devops'
- name: solution
  value: 'C3D.Extensions.Playwright.AspNetCore.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: buildMachine
  value: '$(Agent.MachineName)'
- name: buildUser
  value: '$(Build.QueuedBy)'
- name: 'timestamper'
  value: 'http://timestamp.comodoca.com'
- name: 'git_commit_ids'
  value: ${{ parameters.git_commit_ids }}
- name: 'project_to_build'
  value: ${{ parameters.project_to_build }}
- name: 'target'
  value: 'PackIfChanged'

steps:
- checkout: self
  clean: true
  submodules: true
  persistCredentials: true
  fetchDepth: 0
  fetchTags: true

- powershell: 'Write-Host ("##vso[task.setvariable variable=MSBuildEmitSolution;]0")'
  displayName: 'Ensure MSBuildEmitSolution is not set'

- task: DownloadSecureFile@1
  displayName: 'Download secure file SNK'
  name: snk
  inputs:
    secureFile: '61ad38e7-05ff-4421-aea8-e3241b75c7a1'

- task: PowerShell@2
  displayName: 'Install Certificate'
  inputs:
    targetType: 'filePath'
    filePath: 'build/ImportCert.ps1'
  env:
    password: $(pfx-password)
    pfx: $(c3d-codesign)

- task: PowerShell@2
  displayName: 'Get Commit IDs'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  inputs:
   targetType: inline
   script: |
      $url = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTID/_apis/build/builds/$($env:BUILD_BUILDID)/changes?api-version=5.0"
      Write-Host "URL: $url"
      $changes = Invoke-RestMethod -Uri $url -Method Get -ContentType "application/json" -Headers @{
          Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
      }
      Write-Host "Commits since last (successful) build: $($changes.count)"
      $ids = $changes.value | Select-Object -ExpandProperty id
      $git_commit_ids = $ids -join ";"
      Write-Host "Commit IDs: $git_commit_ids"
      Write-Host ("##vso[task.setvariable variable=git_commit_ids;]$git_commit_ids")

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet >=6.6.1'
  inputs:
    versionSpec: '>=6.6.1'
    checkLatest: true

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'
    feedsToUse: 'config'
    includeNugetOrg: 'true'
    externalFeedCredentials: 'github-czemacleod-packages'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    clean: true
    msbuildArgs: '/t:$(target) /p:ProjectToBuild=$(project_to_build) /p:ContinuousIntegrationBuild=true /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)" /p:BuildUser="$(buildUser)" /p:BuildMachine="$(buildMachine)" /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)"'

# This is failing at present...

#- task: VSTest@2
#  inputs:
#    testSelector: 'testAssemblies'
#    testAssemblyVer2: |
#      **\*.Test.dll
#      !**\*TestAdapter.dll
#      !**\*TestCentric*.dll
#      !**\*TestHost*.dll
#      !**\*TestPlatform*.dll
#      !**\obj\**
#    searchFolder: '$(System.DefaultWorkingDirectory)\test'
#    vstestLocationMethod: 'location'
#    vstestLocation: $(VSTestPath)
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'
#    codeCoverageEnabled: true
#    minimumExpectedTests: 0
#    failOnMinTestsNotRunFail: false
#    failIfCoverageEmpty: false

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

- task: PowerShell@2
  displayName: 'Detect packages'
  inputs:
   targetType: inline
   script: |
     $dir = $env:BUILD_ARTIFACTSTAGINGDIRECTORY + "\*.nupkg"
     Write-Host "Package Directory: $dir"
     $packages = Get-ChildItem -Path $dir -Recurse
     $ids = $packages | Select-Object -ExpandProperty name
     Write-Host "Packages: $ids"
     Write-Host "Package Count: $($packages.Count)"
     Write-Host ("##vso[task.setvariable variable=package_count;]$($packages.Count)")

- task: NuGetCommand@2
  condition: and(succeeded(), ne(variables['package_count'],0))
  displayName: 'NuGet Sign'
  inputs:
    command: custom
    arguments: 'sign $(Build.ArtifactStagingDirectory)\*.nupkg -Timestamper $(timestamper) -CertificateFingerprint $(app_pfx_thumbprint)'

- task: CopyFiles@2
  displayName: Create nuget publish config
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\build'
    contents: 'nuget.publish.config'
    targetFolder: $(Build.ArtifactStagingDirectory)

- task: PowerShell@2
  displayName: Build Nuget Source URL
  inputs:
    targetType: 'inline'
    script: |
      $owner = "$env:GITHUB_OWNER"
      $source = "https://nuget.pkg.github.com/" + $owner.ToLower() + "/index.json"
      Write-Host ("Nuget Source URL = $source")
      Write-Host ("##vso[task.setvariable variable=NUGET_SOURCE]$source")
  env:
    GITHUB_OWNER: $(GITHUB_OWNER)

- script: nuget.exe sources Add -NonInteractive -Name GitHub -Source "%NUGET_SOURCE%" -Username "%GITHUB_USERNAME%" -Password "%GITHUB_TOKEN%" -ConfigFile %NUGET_CONFIG%
  displayName: Add github package source
  env:
    GITHUB_OWNER: $(GITHUB_OWNER)
    GITHUB_USERNAME: $(GITHUB_USERNAME)
    GITHUB_TOKEN: $(GITHUB_TOKEN)
    NUGET_SOURCE: $(NUGET_SOURCE)
    NUGET_CONFIG: $(Build.ArtifactStagingDirectory)\nuget.publish.config

- script: nuget push -Source GitHub -ConfigFile %NUGET_CONFIG% -SkipDuplicate "%PACKAGES_DIR%\*.nupkg"
  displayName: Push Nuget Packages to $(GITHUB_PACKAGES)
  condition: and(succeeded(), ne(variables['package_count'],0))
  env:
    PACKAGES_DIR: $(Build.ArtifactStagingDirectory)
    NUGET_CONFIG: $(Build.ArtifactStagingDirectory)\nuget.publish.config

- task: NuGetCommand@2
  displayName: Push Nuget Packages to nuget.org
  condition: and(succeeded(), ne(variables['package_count'],0))
  inputs:
    command: 'push'
    feedsToUse: 'config'
    includeNugetOrg: 'true'
    publishFeedCredentials: 'NuGet.org'
    externalFeedCredentials: 'NuGet.org'
    packagesToPush: $(Build.ArtifactStagingDirectory)\*.nupkg
    verbosityPush: 'Detailed'
    nuGetFeedType: 'external'
    allowPackageConflicts: true

- powershell: |
    Write-Host "Tagging Build: $env:BuildNumber"
    $tag = "v" + $env:BuildNumber
    git tag $tag
    git push origin $tag
  displayName: Tag build
  env:
    BuildNumber: $(Build.BuildNumber)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

- task: GithubRelease@0 
  displayName: 'Create GitHub Release'
  inputs:
    gitHubConnection: github-czemacleod
    repositoryName: CZEMacLeod/C3D.Extensions.Logging
    assets: $(Build.ArtifactStagingDirectory)/*.nupkg
    addChangeLog: true

- task: PowerShell@2
  displayName: 'Remove Cert'
  inputs:
    targetType: filePath
    filePath: 'build/RemoveCert.ps1'
    arguments: '-thumb $(app_pfx_thumbprint)'
  condition: always()